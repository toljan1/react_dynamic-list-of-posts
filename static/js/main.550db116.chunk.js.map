{"version":3,"sources":["components/PostsList.tsx","components/Loader/Loader.tsx","utils/fetchClient.ts","components/NewCommentForm.tsx","api/posts.ts","components/PostDetails.tsx","components/UserSelector.tsx","App.tsx","index.tsx"],"names":["PostsList","posts","setSideBarIsOpen","setCurrentPost","className","map","post","id","title","type","onClick","Loader","BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","method","data","options","body","JSON","stringify","headers","then","fetch","response","json","client","NewCommentForm","postId","getPostInfo","useState","setBody","email","setEmail","name","setName","showRequiredOn","setShowRequiredOn","addCommentRequest","onSubmit","ev","preventDefault","onReset","htmlFor","value","placeholder","classNames","onChange","currentTarget","PostDetails","postComments","error","showCommentsLoader","setPostComments","setError","formIsOpen","setFormIsOpen","onRemove","commentId","index","comment","indexOf","slice","concat","deleteComment","catch","length","href","UserSelector","setSelectedUser","users","selectedUser","menuIsOpen","setMenuIsOpen","role","user","App","setUsers","currentUserPosts","setcurrentUserPosts","showLoader","setShowLoader","sideBarIsOpen","currentPost","currentPostComments","setCurrentPostComments","setShowCommentsLoader","fetchedComments","useEffect","fetchedUsers","userId","fetchedPosts","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.550db116.chunk.js","sourcesContent":["import React from 'react';\nimport { Post } from '../types/Post';\n\ninterface Props {\n  posts: Post[],\n  setSideBarIsOpen: React.Dispatch<React.SetStateAction<boolean>>,\n  setCurrentPost: React.Dispatch<React.SetStateAction<Post | undefined>>,\n}\n\nexport const PostsList: React.FC<Props> = ({\n  posts, setSideBarIsOpen, setCurrentPost,\n}) => (\n  <div data-cy=\"PostsList\">\n    <p className=\"title\">Posts:</p>\n\n    <table className=\"table is-fullwidth is-striped is-hoverable is-narrow\">\n      <thead>\n        <tr className=\"has-background-link-light\">\n          <th>#</th>\n          <th>Title</th>\n          <th> </th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {posts.map(post => (\n          <tr\n            data-cy=\"Post\"\n            key={post.id}\n          >\n            <td data-cy=\"PostId\">{post.id}</td>\n\n            <td data-cy=\"PostTitle\">\n              {post.title}\n            </td>\n\n            <td className=\"has-text-right is-vcentered\">\n              <button\n                type=\"button\"\n                data-cy=\"PostButton\"\n                className=\"button is-link is-light\"\n                onClick={() => {\n                  setSideBarIsOpen(true);\n                  setCurrentPost(post);\n                }}\n              >\n                Open\n              </button>\n            </td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  </div>\n);\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","const BASE_URL = 'https://mate.academy/students-api';\n\n// a promise resolved after a given delay\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\n// To have autocompletion and avoid mistypes\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: any = null, // we can send any data to the server\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    // We add body and Content-Type only for the requests with data\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  // for a demo purpose we emulate a delay to see if Loaders work\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => response.json());\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(url: string, data: any) => request<T>(url, 'POST', data),\n  patch: <T>(url: string, data: any) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","import React, { useState } from 'react';\nimport classNames from 'classnames';\nimport { addComment } from '../api/posts';\n\ninterface Props {\n  postId: number | undefined,\n  getPostInfo: () => void\n}\n\nexport const NewCommentForm: React.FC<Props> = ({ postId, getPostInfo }) => {\n  const [body, setBody] = useState('');\n  const [email, setEmail] = useState('');\n  const [name, setName] = useState('');\n  const [showRequiredOn, setShowRequiredOn] = useState('');\n\n  const addCommentRequest = () => {\n    if (postId) {\n      if (body && email && name) {\n        setShowRequiredOn('');\n\n        addComment({\n          postId, name, email, body,\n        })\n          .then(() => {\n            getPostInfo();\n            setBody('');\n          });\n\n        return;\n      }\n\n      if (!name) {\n        setShowRequiredOn('name');\n\n        return;\n      }\n\n      if (!email) {\n        setShowRequiredOn('email');\n\n        return;\n      }\n\n      if (!body) {\n        setShowRequiredOn('body');\n      }\n    }\n  };\n\n  return (\n    <form\n      data-cy=\"NewCommentForm\"\n      onSubmit={(ev) => {\n        ev.preventDefault();\n        addCommentRequest();\n      }}\n      onReset={() => {\n        setBody('');\n        setEmail('');\n        setName('');\n      }}\n    >\n      <div className=\"field\" data-cy=\"NameField\">\n        <label className=\"label\" htmlFor=\"comment-author-name\">\n          Author Name\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"name\"\n            value={name}\n            id=\"comment-author-name\"\n            placeholder=\"Name Surname\"\n            className={classNames(\n              'input',\n              {\n                'is-danger': showRequiredOn === 'name',\n              },\n            )}\n            onChange={(ev) => setName(ev.currentTarget.value)}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-user\" />\n          </span>\n\n          {showRequiredOn === 'name' ? (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          ) : null}\n        </div>\n\n        {showRequiredOn === 'name' ? (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Name is required\n          </p>\n        ) : null}\n      </div>\n\n      <div className=\"field\" data-cy=\"EmailField\">\n        <label className=\"label\" htmlFor=\"comment-author-email\">\n          Author Email\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"email\"\n            value={email}\n            id=\"comment-author-email\"\n            placeholder=\"email@test.com\"\n            className={classNames(\n              'input',\n              {\n                'is-danger': showRequiredOn === 'email',\n              },\n            )}\n            onChange={(ev) => setEmail(ev.currentTarget.value)}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-envelope\" />\n          </span>\n\n          {showRequiredOn === 'email' ? (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          ) : null}\n        </div>\n\n        {showRequiredOn === 'email' ? (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Email is required\n          </p>\n        ) : null}\n      </div>\n\n      <div className=\"field\" data-cy=\"BodyField\">\n        <label className=\"label\" htmlFor=\"comment-body\">\n          Comment Text\n        </label>\n\n        <div className=\"control\">\n          <textarea\n            id=\"comment-body\"\n            name=\"body\"\n            value={body}\n            placeholder=\"Type comment here\"\n            className={classNames(\n              'textarea',\n              {\n                'is-danger': showRequiredOn === 'body',\n              },\n            )}\n            onChange={(ev) => setBody(ev.currentTarget.value)}\n          />\n        </div>\n\n        {showRequiredOn === 'body' ? (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Enter some text\n          </p>\n        ) : null}\n      </div>\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            className=\"button is-link\"\n          >\n            Add\n          </button>\n        </div>\n\n        <div className=\"control\">\n          {/* eslint-disable-next-line react/button-has-type */}\n          <button type=\"reset\" className=\"button is-link is-light\">\n            Clear\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import { Post } from '../types/Post';\nimport { User } from '../types/User';\nimport { Comment } from '../types/Comment';\nimport { client } from '../utils/fetchClient';\nimport { CommentRequest } from '../types/commentRequest';\n\nexport const getUsers = (url: string) => {\n  return client.get<User[]>(`/${url}`);\n};\n\nexport const getPostsByUser = (userId: number) => {\n  return client.get<Post[]>(`/posts?userId=${userId}`);\n};\n\nexport const postInfo = (postId: number) => {\n  return client.get<Comment[]>(`/comments?postId=${postId}`);\n};\n\nexport const addComment = (data: CommentRequest) => {\n  return client.post<CommentRequest>('/comments', data);\n};\n\nexport const deleteComment = (commentId: number) => {\n  return client.delete(`/comments/${commentId}`);\n};\n","import React, { useState } from 'react';\nimport { Loader } from './Loader';\nimport { NewCommentForm } from './NewCommentForm';\nimport { Comment } from '../types/Comment';\nimport { Post } from '../types/Post';\nimport { deleteComment } from '../api/posts';\n\ninterface Props {\n  postComments: Comment[],\n  error: string\n  showCommentsLoader: boolean\n  post: Post | undefined,\n  getPostInfo: () => void\n  setPostComments: React.Dispatch<React.SetStateAction<Comment[]>>,\n  setError: React.Dispatch<React.SetStateAction<string>>\n}\n\nexport const PostDetails: React.FC<Props> = ({\n  postComments,\n  error,\n  showCommentsLoader,\n  post,\n  getPostInfo,\n  setPostComments,\n  setError,\n}) => {\n  const [formIsOpen, setFormIsOpen] = useState(false);\n\n  const onRemove = (commentId: number) => {\n    const index = postComments.map(comment => comment.id)\n      .indexOf(commentId);\n\n    setPostComments(postComments.slice(0, index)\n      .concat(postComments.slice(index + 1)));\n\n    deleteComment(commentId)\n      .catch(() => {\n        setError('Cannot delete comment');\n      });\n  };\n\n  return (\n    <div className=\"content\" data-cy=\"PostDetails\">\n      <div className=\"content\" data-cy=\"PostDetails\">\n        <div className=\"block\">\n          <h2 data-cy=\"PostTitle\">\n            {`#${post?.id}: ${post?.title}`}\n          </h2>\n\n          <p data-cy=\"PostBody\">\n            {post?.body}\n          </p>\n        </div>\n\n        <div className=\"block\">\n          {showCommentsLoader ? (\n            <Loader />\n          ) : (\n            <>\n              {error ? (\n                <div className=\"notification is-danger\" data-cy=\"CommentsError\">\n                  {error}\n                </div>\n              ) : (\n                <>\n                  {!postComments.length ? (\n                    <p className=\"title is-4\" data-cy=\"NoCommentsMessage\">\n                      No comments yet\n                    </p>\n                  ) : (\n                    <>\n                      <p className=\"title is-4\">Comments:</p>\n\n                      <>\n                        {postComments.map(comment => (\n                          <article\n                            className=\"message is-small\"\n                            data-cy=\"Comment\"\n                            key={comment.id}\n                          >\n                            <div className=\"message-header\">\n                              <a href={`mailto:${comment.email}`} data-cy=\"CommentAuthor\">\n                                {comment.name}\n                              </a>\n                              <button\n                                data-cy=\"CommentDelete\"\n                                type=\"button\"\n                                className=\"delete is-small\"\n                                aria-label=\"delete\"\n                                onClick={() => onRemove(comment.id)}\n                              >\n                                delete button\n                              </button>\n                            </div>\n\n                            <div className=\"message-body\" data-cy=\"CommentBody\">\n                              {comment.body}\n                            </div>\n                          </article>\n                        ))}\n                      </>\n                    </>\n                  )}\n                </>\n              )}\n            </>\n          )}\n\n          {!formIsOpen ? (\n            <button\n              data-cy=\"WriteCommentButton\"\n              type=\"button\"\n              className=\"button is-link\"\n              onClick={() => setFormIsOpen(true)}\n            >\n              Write a comment\n            </button>\n          ) : null}\n        </div>\n\n        {formIsOpen ? (\n          <NewCommentForm\n            postId={post?.id}\n            getPostInfo={getPostInfo}\n          />\n        ) : null}\n      </div>\n    </div>\n  );\n};\n","import React, { useState } from 'react';\nimport classNames from 'classnames';\nimport { User } from '../types/User';\n\ninterface Props {\n  setSelectedUser: React.Dispatch<React.SetStateAction<User | null>>\n  users: User[],\n  selectedUser: User | null,\n}\n\nexport const UserSelector: React.FC<Props> = ({\n  setSelectedUser, users, selectedUser,\n}) => {\n  const [menuIsOpen, setMenuIsOpen] = useState(false);\n\n  return (\n    <div\n      data-cy=\"UserSelector\"\n      className=\"dropdown is-active\"\n    >\n      <div className=\"dropdown-trigger\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          aria-haspopup=\"true\"\n          aria-controls=\"dropdown-menu\"\n          onClick={() => setMenuIsOpen(!menuIsOpen)}\n        >\n          <span>\n            {selectedUser ? selectedUser?.name : 'Choose a user'}\n          </span>\n\n          <span className=\"icon is-small\">\n            <i className=\"fas fa-angle-down\" aria-hidden=\"true\" />\n          </span>\n        </button>\n      </div>\n\n      {menuIsOpen ? (\n        <div className=\"dropdown-menu\" id=\"dropdown-menu\" role=\"menu\">\n          <div className=\"dropdown-content\">\n            {users.map(user => (\n              <a\n                href={`#user-${user.id}`}\n                className={classNames(\n                  'dropdown-item',\n                  {\n                    'is-active': user === selectedUser,\n                  },\n                )}\n                onClick={() => {\n                  setSelectedUser(user);\n                  setMenuIsOpen(false);\n                }}\n                key={user.id}\n              >\n                {user.name}\n              </a>\n            ))}\n          </div>\n        </div>\n      ) : null}\n    </div>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport 'bulma/bulma.sass';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './App.scss';\n\nimport classNames from 'classnames';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { UserSelector } from './components/UserSelector';\nimport { User } from './types/User';\nimport { getPostsByUser, getUsers, postInfo } from './api/posts';\nimport { Post } from './types/Post';\nimport { Loader } from './components/Loader';\nimport { Comment } from './types/Comment';\n\nexport const App: React.FC = () => {\n  const [selectedUser, setSelectedUser] = useState<User | null>(null);\n  const [users, setUsers] = useState<User[]>([]);\n  const [currentUserPosts, setcurrentUserPosts] = useState<Post[]>([]);\n  const [error, setError] = useState('');\n  const [showLoader, setShowLoader] = useState(false);\n  const [sideBarIsOpen, setSideBarIsOpen] = useState(false);\n  const [currentPost, setCurrentPost] = useState<Post>();\n  const [currentPostComments, setCurrentPostComments] = useState<Comment[]>([]);\n  const [showCommentsLoader, setShowCommentsLoader] = useState(false);\n\n  const getUsersFromServer = () => {\n    getUsers('users')\n      .then((fetchedUsers: User[]) => {\n        setUsers(fetchedUsers);\n        setError('');\n      })\n      .catch(() => {\n        setError('Cannot load users');\n      });\n  };\n\n  const getUserPosts = () => {\n    if (selectedUser) {\n      setShowLoader(true);\n\n      getPostsByUser(selectedUser?.id)\n        .then((fetchedPosts) => {\n          setcurrentUserPosts(fetchedPosts);\n          setError('');\n          setShowLoader(false);\n        })\n        .catch(() => {\n          setError('Cannot load user posts');\n          setShowLoader(false);\n        });\n    }\n  };\n\n  const getPostInfo = () => {\n    if (currentPost?.id) {\n      setShowCommentsLoader(true);\n\n      postInfo(currentPost.id)\n        .then((fetchedComments) => {\n          setCurrentPostComments(fetchedComments);\n          setShowCommentsLoader(false);\n        })\n        .catch(() => {\n          setError('Cannot load post comments');\n          setShowCommentsLoader(false);\n        });\n    }\n  };\n\n  useEffect(getUsersFromServer, []);\n  useEffect(getUserPosts, [selectedUser]);\n  useEffect(getPostInfo, [currentPost]);\n\n  return (\n    <main className=\"section\">\n      <div className=\"container\">\n        <div className=\"tile is-ancestor\">\n          <div className=\"tile is-parent\">\n            <div className=\"tile is-child box is-success\">\n              <div className=\"block\">\n                <UserSelector\n                  setSelectedUser={setSelectedUser}\n                  users={users}\n                  selectedUser={selectedUser}\n                />\n              </div>\n\n              <div className=\"block\" data-cy=\"MainContent\">\n                {selectedUser ? (\n                  <>\n                    {showLoader ? (\n                      <Loader />\n                    ) : (\n                      <>\n                        {error.length ? (\n                          <div\n                            className=\"notification is-danger\"\n                            data-cy=\"PostsLoadingError\"\n                          >\n                            {error}\n                          </div>\n                        ) : (\n                          <>\n                            {!currentUserPosts.length ? (\n                              <div\n                                className=\"notification is-warning\"\n                                data-cy=\"NoPostsYet\"\n                              >\n                                No posts yet\n                              </div>\n                            ) : (\n                              <PostsList\n                                posts={currentUserPosts}\n                                setSideBarIsOpen={setSideBarIsOpen}\n                                setCurrentPost={setCurrentPost}\n                              />\n                            )}\n                          </>\n                        )}\n                      </>\n                    )}\n                  </>\n                ) : (\n                  <p data-cy=\"NoSelectedUser\">\n                    No user selected\n                  </p>\n                )}\n              </div>\n            </div>\n          </div>\n\n          {sideBarIsOpen ? (\n            <div\n              data-cy=\"Sidebar\"\n              className={classNames(\n                'tile',\n                'is-parent',\n                'is-8-desktop',\n                'Sidebar',\n                'Sidebar--open',\n              )}\n            >\n              <div className=\"tile is-child box is-success \">\n                <PostDetails\n                  postComments={currentPostComments}\n                  error={error}\n                  showCommentsLoader={showCommentsLoader}\n                  post={currentPost}\n                  getPostInfo={getPostInfo}\n                  setPostComments={setCurrentPostComments}\n                  setError={setError}\n                />\n              </div>\n            </div>\n          ) : null}\n        </div>\n      </div>\n    </main>\n  );\n};\n","import ReactDOM from 'react-dom';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}